# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    default_admin_email: admin@example.com
    default_domain: '127.0.0.1'
    default_scheme: 'https'

    router.request_context.host: '%env(default:default_domain:SYMFONY_DEFAULT_ROUTE_HOST)%'
    router.request_context.scheme: '%env(default:default_scheme:SYMFONY_DEFAULT_ROUTE_SCHEME)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            string $uploadBasePath: "/uploads"
            string $uploadDir: "/public/uploads"
            string $peoplePhotoDir: "/images/people"
            string $peoplePhotoDirRealPath: "%kernel.project_dir%/public/uploads/images/people"
            string $adminEmail: "%env(string:default:default_admin_email:ADMIN_EMAIL)%"

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\EntityListener\PeopleEntityListener:
        tags:
            - { name: 'doctrine.orm.entity_listener', event: 'prePersist', entity: 'App\Entity\People' }
            - { name: 'doctrine.orm.entity_listener', event: 'preUpdate', entity: 'App\Entity\People' }
            - { name: 'doctrine.orm.entity_listener', event: 'postPersist', entity: 'App\Entity\People' }

    Symfony\Component\HttpKernel\HttpCache\StoreInterface: '@http_cache.store'

    App\Serializer\AdminGroupsContextBuilder:
        decorates: 'api_platform.serializer.context_builder'
        arguments: [ '@App\Serializer\AdminGroupsContextBuilder.inner' ]
#        autoconfigure: false

    App\ApiPlatform\AutoGroupResourceMetadataFactory:
        decorates: 'api_platform.metadata.resource.metadata_factory'
        arguments: [ '@App\ApiPlatform\AutoGroupResourceMetadataFactory.inner' ]
        decoration_priority: -20

    App\Doctrine\PeopleSetOwnerListener:
        tags: [ doctrine.orm.entity_listener ]

    App\Doctrine\UuidListener:
        tags: [ doctrine.orm.entity_listener ]

    App\DataPersister\UserDataPersister:
        bind:
            $decoratedDataPersister: '@api_platform.doctrine.orm.data_persister'

    App\DataProvider\UserDataProvider:
        bind:
            $collectionDataProvider: '@api_platform.doctrine.orm.default.collection_data_provider'
            $itemDataProvider: '@api_platform.doctrine.orm.default.item_data_provider'

    'App\DataTransformer\PeopleOutputDataTransformer': ~
        # Uncomment only if autoconfiguration is disabled
        #tags: [ 'api_platform.data_transformer' ]

    # https://symfony.com/doc/current/components/uid.html#generating-and-inspecting-uuids-ulids-in-the-console
#    Symfony\Component\Uid\Command\GenerateUlidCommand: ~
    Symfony\Component\Uid\Command\GenerateUuidCommand: ~
#    Symfony\Component\Uid\Command\InspectUlidCommand: ~
#    Symfony\Component\Uid\Command\InspectUuidCommand: ~